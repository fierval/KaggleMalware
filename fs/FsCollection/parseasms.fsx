open System
open System.IO
open System.Linq
open System.Collections.Generic

#load "utils.fsx"
open Utils

let inPath = @"h:\kaggle\malware\text\test"
let outPath = @"c:\kaggle\malware\text\test\instr_freq"
let tmp = Path.GetTempPath()

createOutputDir outPath

let files = Directory.GetFiles(inPath, "*.asm")
//let files = [@"h:\kaggle\malware\text\train\04EjIdbPV5e1XroFOpiN.asm"]

// only save counts of each feature to speed up loading
let countOnly = true
// holds all dictionaries by file name
let mutable features = Dictionary<string, Dictionary<string, int>>()

// take each file and parse it. Create a dictionary
for file in files do
    let lines = File.ReadLines(file).SkipWhile(fun l -> not (l.StartsWith ".text")).TakeWhile(fun l -> l.StartsWith(".text")).ToList()

    let instrs = Dictionary<string, int>()
    instrs.Add("subr", 0)

    for line in lines do
        let meanIndex = line.IndexOf("  ")
        if meanIndex > 0 then
            let meanLine = line.Substring(meanIndex).Trim(' ')

            if (not (String.IsNullOrWhiteSpace(meanLine))) then
                if meanLine.IndexOf("S U B R O U T I N E") > 0 then
                    instrs.["subr"] <- instrs.["subr"] + 1
                else 
                    let mutable firstInstr = meanLine.Split([|' '|], 2).[0].Trim()
                    
                    let cond = firstInstr <> "dd" && firstInstr <> "dc" && firstInstr.Length >=3 && firstInstr.Length <=5             
                    let hasBadChars = firstInstr.Count(fun c -> int c > 127 || not (Char.IsLetter c )) > 0

                    if cond && not hasBadChars then
                        if firstInstr.IndexOf(' ') > -1 then
                            firstInstr <- firstInstr.Split(' ').[0]
                        if instrs.ContainsKey firstInstr then instrs.[firstInstr] <- instrs.[firstInstr] + 1
                        else
                            instrs.Add(firstInstr, 1)
    printfn "Processed: %s" (Path.GetFileName file)            
    
    let filtered = instrs.Where(fun kvp -> kvp.Value > 1)
    features.Add(file, filtered.ToDictionary((fun kvp -> kvp.Key), (fun (kvp : KeyValuePair<string, int>) -> kvp.Value)))

let allFeatures = 
    features.SelectMany(fun kvp -> kvp.Value.Keys.AsEnumerable()).GroupBy(fun f -> f).Where(fun gr-> gr.Count() >= 30).Select(fun gr -> gr.Key).ToArray()
    
for file in files do
    let instrs = features.[file]
    let relevant = instrs.Keys.Intersect(allFeatures).ToList()
    let missing = allFeatures.Except(relevant).Select(fun f -> f + ",0").ToList()
    let all = relevant.Select(fun r -> r + "," + instrs.[r].ToString()).Concat(missing)
        
    let toWrite = all.OrderBy(fun s -> s.Split(',').[0]).Select(fun f -> if countOnly then f.Split(',').[1] else f).ToList()
    saveCsv (toWrite.ToArray()) outPath file ".csv"
