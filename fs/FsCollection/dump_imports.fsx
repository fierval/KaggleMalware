open System
open System.IO
open System.Linq
open System.Collections.Generic

#load "utils.fsx"
open Utils

let inPath = @"h:\kaggle\malware\text\train"
let outPath = @"c:\kaggle\malware\text\test\string_dump"

let files = Directory.GetFiles(inPath, "*.asm")
//let files = [@"h:\kaggle\malware\text\train\04EjIdbPV5e1XroFOpiN.asm"]

// holds all dictionaries by file name
let mutable features = Dictionary<string, int>()

// take each file and parse it. Create a dictionary
for file in files do
    let lines = File.ReadLines(file).SkipWhile(fun l -> not (l.StartsWith ".idata")).TakeWhile(fun l -> l.StartsWith(".idata")).ToList()

    for line in lines do
        let meanIndex = line.IndexOf("extrn")
        if meanIndex >= 0 then
            let apis = line.Substring(meanIndex + "extrn".Length).Trim().Split([|' '; ':'; '_';'@';',';'(';')';'?';'0'|])
            let maxLen = apis.Where(fun x -> x.Length > 0 && Char.IsLetter(x.[0])).Max(fun x -> x.Length)
            let api = apis.First(fun x -> x.Length = maxLen)
            if api.Length > 3 then
                if features.ContainsKey api then
                    features.[api] <- features.[api] + 1
                else
                    features.[api] <- 1

    printfn "Processed: %s. Total features: %d" (defile file) (features.Keys.Count)

let featureList = features.Where(fun kvp -> kvp.Value > 10).Select(fun kvp -> kvp.Key + "," + kvp.Value.ToString()).ToArray()

saveCsv featureList @"c:\temp" "features" ".csv"
    
