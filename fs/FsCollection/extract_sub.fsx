open System
open System.IO
open System.Linq
open System.Collections.Generic

#load "utils.fsx"
open Utils

#load "FSharp.Charting.fsx"
open FSharp.Charting

let inPath = @"h:\kaggle\malware\text\train"
let outPath = @"c:\kaggle\malware\text\train\subs"
let tmp = Path.GetTempPath()
let labels = @"c:\kaggle\malware\trainLabels.csv"

let files = Directory.GetFiles(inPath, "*.asm")

let labs = parseLabels labels

// only save counts of each feature to speed up loading
let countOnly = true
// holds all dictionaries by file name
let mutable features = List<int * int>()

// take each file and parse it. Create a dictionary
for file in files do
    let lines = File.ReadLines(file).SkipWhile(fun l -> not (l.StartsWith ".text")).TakeWhile(fun l -> l.StartsWith(".text")).ToList()

    let mutable subrs = 0

    for line in lines do
        let meanIndex = line.IndexOf("  ")
        if meanIndex > 0 then
            let meanLine = line.Substring(meanIndex).Trim(' ')

            if (not (String.IsNullOrWhiteSpace(meanLine))) then
                if meanLine.IndexOf("S U B R O U T I N E") > 0 then
                    subrs <- subrs + 1
    printfn "Processed: %s" (Path.GetFileName file)            
    
    let lab = labs.[defile file]
    features.Add(lab, subrs)

let lookupFeatures = features.ToLookup((fun (a, b) -> a), (fun (a, b) -> b))

let avgS = lookupFeatures.Select(fun kvp -> kvp.Key, kvp.Average())
    
Chart.Point(avgS)
