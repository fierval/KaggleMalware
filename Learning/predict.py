import utils
from SupervisedLearning import SKSupervisedLearning
from train_files import TrainFiles
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.svm import SVC
from os import path

tf = TrainFiles("/kaggle/malware/train/1dlbp", "/kaggle/malware/test/1dlbp", "/kaggle/malware/trainLabels.csv", validate = False)

X_train, Y_train, X_test, _ = tf.prepare_inputs()

def predict(X_train, Y_train, X_test):
    # no validation labels on actual prediction
    Y_test = np.array([])
    
    # random forest
    sl_rfc = SKSupervisedLearning(RandomForestClassifier, X_train, Y_train, X_test, Y_test)
    sl_rfc.fit_standard_scaler()
    sl_rfc.train_params = {'max_depth': 100, 'n_estimators': 8000}

    print "Starting on RF: ", utils.time_now_str()

    ll_rfc, _ = sl_rfc.fit_and_validate()
    print "RF score: {0:.4f}".format(ll_rfc)

    # trees
    sl_trees = SKSupervisedLearning(ExtraTreesClassifier, X_train, Y_train, X_test, Y_test)
    sl_trees.fit_standard_scaler()
    sl_trees.train_params =  {'n_estimators': 8000}
    
    print "Starting on trees: ", utils.time_now_str()

    ll_trees, _ = sl_trees.fit_and_validate()
    print "Trees score: {0:.4f}".format(ll_trees)
    
    # selecte important trees features
    selected = np.where(sl_trees.clf.feature_importances_ > 0.003)[0]

    X_train = sl_trees.X_train_scaled[:, selected]
    X_test = sl_trees.X_test_scaled[:, selected]

    sl_svm = SKSupervisedLearning(SVC, X_train, Y_train, X_test, Y_test)
    sl_svm.train_params = {'C': 100, 'gamma': 0.1, 'probability': True}

    print "Starting SVM: ", utils.time_now_str()
    ll_svm, _ = sl_svm.fit_and_validate()
    print "SVM score: {0:.4f}".format(ll_svm)
    print "Finished training: ", utils.time_now_str()

    proba = utils.vote_reduce([sl_svm.proba_test, sl_rfc.proba_test], [2./3., 1./3.])

    out_labels = "/kaggle/malware/submission18.csv"
    task_labels = "/kaggle/malware/testLabels.csv"
    labels = [path.splitext(t)[0] for t in tf.get_val_inputs()]
    utils.write_to_csv(task_labels, labels, proba, out_labels)

