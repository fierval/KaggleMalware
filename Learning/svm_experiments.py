from SupervisedLearning import SKSupervisedLearning
from train_files import TrainFiles
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.svm import SVC
from os import path
from sklearn.metrics import log_loss
from sklearn.ensemble import AdaBoostClassifier
from sklearn.cross_validation import cross_val_predict

tf = TrainFiles('/kaggle/malware/train/mix_lbp_200', '/kaggle/malware/test/mix_lbp_200', "/kaggle/malware/trainLabels.csv", validate = False)

X_train, Y_train, X_test, Y_test = tf.prepare_inputs()

#sl_svm = SKSupervisedLearning(SVC, X_train, Y_train, X_test, Y_test)
#sl_svm.fit_standard_scaler()
#sl_svm.train_params = {'probability': True}

#sl_svm.estimation_params = {'C': [100.], 'gamma': [1.e-3]}
#ll_tr, ll_tst = sl_svm.fit_and_validate()

#print "Log loss: ", ll_tr

#sl_svm.grid_search_classifier()

sl_trees = SKSupervisedLearning(RandomForestClassifier, X_train, Y_train, X_test, Y_test)
sl_trees.fit_standard_scaler()

sl_trees.estimation_params = {'n_estimators' : [7500, 10000], 'max_depth' : [100, 150, 200]}
sl_trees.grid_search_classifier()

'''
predicted = cross_val_predict(SVC(**sl_svm.train_params), sl_svm.X_train_scaled, n_jobs = -1, y = Y_train, cv=10)

y = np.arange(1, 10)
fig,ax = plt.subplots()
ax.scatter(y, predicted)
ax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)
ax.set_xlabel('Measured')
ax.set_ylabel('Predicted')
fig.show()
'''