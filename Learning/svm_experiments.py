import utils
from SupervisedLearning import SKSupervisedLearning
from train_files import TrainFiles
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.svm import SVC
from os import path
from sklearn.metrics import log_loss
from sklearn.ensemble import AdaBoostClassifier

#tf = TrainFiles("/kaggle/malware/train/1dlbp", "/kaggle/malware/test/1dlbp", "/kaggle/malware/trainLabels.csv", validate = False)
#tf = TrainFiles('/kaggle/malware/scratchpad/text/train/instr_freq', '/kaggle/malware/scratchpad/text/test/instr_freq', "/kaggle/malware/trainLabels.csv", validate = True)
tf = TrainFiles('/kaggle/malware/scratchpad/train/1dlbp', '/kaggle/malware/scratchpad/test/1dlbp', "/kaggle/malware/trainLabels.csv", validate = True)

X_train, Y_train, X_test, Y_test = tf.prepare_inputs()
#X_train, Y_train, X_test, Y_test = tf.prepare_inputs_csv()
doSelection = False

sl_svm = SKSupervisedLearning(SVC, X_train, Y_train, X_test, Y_test)
sl_svm.fit_standard_scaler()
sl_svm.train_params = {'C': 100, 'gamma': 0.1, 'probability': True}
_, ll = sl_svm.fit_and_validate()

print "Log loss: ", ll

sl_ab = SKSupervisedLearning(AdaBoostClassifier, X_train, Y_train, X_test, Y_test)
sl_ab.fit_standard_scaler()
sl_ab.train_params = {'base_estimator' : sl_svm.clf, 'n_estimators' : 50}

_, ll_ab = sl_ab.fit_and_validate()

score = sl_ab.clf.score(sl_svm.X_test_scaled, Y_test)

print "Ada Boost score: ", score
print "Ada Boost log loss: ", ll_ab


